// Inspiration: https://github.com/jmuheim/base/blob/master/spec/features/autocomplete_spec.rb.

ALL_OPTIONS = [
  'Soccer',
  'Badminton',
  'Movies',
  'Gardening',
  'Kickboxing',
  'Hiking',
  'Dancing',
  'Painting',
  'Cooking',
  'Reading',
  'Sleeping',
  'Programming'
]

describe('adg-combobox (multi-select)', () => {
  before(() => {
    cy.visit('http://localhost:3333')
  })
  
  it('displays initially as expected (unfocused)', () => {
    cy.get('accessible-dropdown')
      .should('have_state') // We could write a test helper similar to `expect_autocomplete_state`
  })

  describe('mouse interaction', () => {
    it('shows options when clicking into unfocused filter, and hides them when clicking into focused filter', () => {
      cy.click_filter() // We need a test helper for this, similar to `click_filter`

      cy.get('accessible-dropdown')
        .should('have_state', {
          options_expanded: true,
          filter_focused: true,
          visible_options: ALL_OPTIONS
        })

      cy.click_filter()

      cy.get('accessible-dropdown')
        .should('have_state', {
          options_expanded: false,
          filter_focused:   true
        })
    })
  })

  describe('keyboard interaction', () => {
    describe('tab in', () => {
      it("doesn't show options", () => {
        cy.focus_filter_with_keyboard() // We need a test helper for this, similar to `focus_filter_with_keyboard`

        cy.get('accessible-dropdown')
          .should('have_state', {
            filter_focused: true,
          })
      })
    })

    describe('press up', () => {
      context('options collapsed', () => {
        it("shows options", () => {
          cy.focus_filter_with_keyboard_and_press("up") // We need a test helper for this, similar to `focus_filter_with_keyboard_and_press`

          cy.get('accessible-dropdown')
            .should('have_state', {
              options_expanded: true,
              filter_focused: true,
              visible_options: ALL_OPTIONS
            })
        })
      })

      context('options expanded', () => {
        it("places selection at last option", () => {
          cy.focus_filter_with_keyboard_and_press("up")

          cy.get('accessible-dropdown')
            .should('have_state', {
              options_expanded: true,
              filter_focused: true,
              checked_option: 'Programming', // Or `ALL_OPTIONS.last`?
              visible_options: ALL_OPTIONS
            })
        })
      })

      describe('filtering', () => {
        context('options collapsed', () => {
          it("displays options", () => {
          cy.focus_filter_with_keyboard_and_press("xx")

          cy.get('accessible-dropdown')
            .should('have_state', {
              options_expanded: true,
              filter_focused:   true,
              filter_value:     'xx',
              visible_options:  [],
              options_count:    '0 of 12 options for xx'
            })
        })

        context('options expanded', () => {
          it("displays options", () => {
          cy.focus_filter_with_keyboard_and_press("x")

          cy.get('accessible-dropdown')
            .should('have_state', {
              options_expanded: true,
              filter_focused:   true,
              filter_value:     'xx',
              visible_options:  ['Kickboxing'],
              options_count:    '1 of 12 options for x'
            })
        })
    })
  })
})